name: Auto Update Jekyll Blog

on:
  push:
    branches:
      - main

jobs:
  update_blog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.5'  # 指定你的 Ruby 版本

      - name: Install Bundler and Jekyll
        run: |
          gem install bundler jekyll
          bundle install

      - name: Detect New Categories
        id: detect_categories
        run: |
          # 查找以 _ 开头且首字母为大写的文件夹，并检查该文件夹中是否存在 .md 文件
          new_collections=$(for dir in $(find . -maxdepth 1 -type d -name '_*' -exec basename {} \;); do
            folder_name=${dir#_}  # 去除 _ 前缀
            if [[ "$folder_name" =~ ^[A-Z] && "$(ls $dir/*.md 2>/dev/null)" ]]; then
              echo $folder_name
            fi
          done | tr '\n' ' ')
          
          # 输出检测到的分类文件夹
          echo "Detected new collections: $new_collections"
          echo "::set-output name=new_categories::$new_collections"

      - name: Update tag.html with new categories
        run: |
          new_collections="${{ steps.detect_categories.outputs.new_categories }}"
          if [[ -n "$new_collections" ]]; then
            # 读取现有的 assign 语句
            assign_statement=$(grep '{% assign all_posts = ' tag.html)
            # 移除最后的 %} 符号
            assign_statement="${assign_statement% %}"
            # 添加新的集合
            for category in $new_collections; do
              assign_statement="${assign_statement} | concat: site.${category}"
            done
            # 添加结束符
            assign_statement="${assign_statement} %}"
            # 替换 tag.html 中的 assign 语句
            sed -i "s/{% assign all_posts = .*/${assign_statement}/" tag.html
          fi

      - name: Update _includes/categories.html with new categories
        run: |
          new_collections="${{ steps.detect_categories.outputs.new_categories }}"
          if [[ -n "$new_collections" ]]; then
            # 读取现有的 if 语句
            if_statement=$(grep '{% if page.name == ' _includes/categories.html)
            # 移除最后的 %} 符号
            if_statement="${if_statement% %}"
            # 添加新的分类页面检查
            for category in $new_collections; do
              if_statement="${if_statement} or page.name == '${category}.html'"
            done
            # 添加结束符
            if_statement="${if_statement} %}"
            # 替换 _includes/categories.html 中的 if 语句
            sed -i "s/{% if page.name == .*/${if_statement}/" _includes/categories.html
          fi

      - name: Create New Category HTML Pages
        run: |
          new_collections="${{ steps.detect_categories.outputs.new_categories }}"
          echo "new_collections: $new_collections"  # 打印调试信息
          
          # 添加检查，确保 new_collections 非空
          if [[ -n "$new_collections" ]]; then
            for category in $new_collections; do
              echo "Creating ${category}.html"
              # 使用 echo 和 > 替代 cat <<EOT
              echo "---" > "${category}.html"
              echo "layout: list" >> "${category}.html"
              echo "title: ${category}" >> "${category}.html"
              echo "---" >> "${category}.html"
              echo "<main class=\"container\">" >> "${category}.html"
              echo "  <div class=\"article-list\">" >> "${category}.html"
              echo "    {% for post in site.${category} %}" >> "${category}.html"
              echo "    <article class=\"post-preview\">" >> "${category}.html"
              echo "      <div class=\"post-content\">" >> "${category}.html"
              echo "        <h3><a href=\"{{ post.url | relative_url }}\">{{ post.title }}</a></h3>" >> "${category}.html"
              echo "        {{ post.excerpt }}" >> "${category}.html"
              echo "      </div>" >> "${category}.html"
              echo "    </article>" >> "${category}.html"
              echo "    {% endfor %}" >> "${category}.html"
              echo "  </div>" >> "${category}.html"
              echo "</main>" >> "${category}.html"
              echo "{% include categories.html posts=site.${category} %}" >> "${category}.html"
            done
          else
            echo "No new categories detected. Skipping category creation."
          fi

      - name: Commit and Push Changes
        run: |
          git config --global user.name "Carrie-L"
          git config --global user.email "hedypolly@gmail.com"
          git add _config.yml *.html _includes/categories.html tag.html
          git commit -m "Automatically updated _config.yml, tag.html, and _includes/categories.html for new categories"
          git push
